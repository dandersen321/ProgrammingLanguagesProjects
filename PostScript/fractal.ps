%this is the length of the line at the last section of a branch,
%the branch prior to it will be twice that value and so on
/smallestLineHeight 25 def 

%the rotation used when creating a left and right branch from a straight branch
/rotateConstant 30 def

%when the fractal function is first called, the first parameter is saved
%which is the number of lines from the base of the tree to the top of a branch
%this value will be used to determine how many branches are made width wise on each
%level (which is used for determing the color to draw the branch)
/startNumberOfFractals -1 def

%this function makes a fractal tree of a rainbow pattern
%it initially takes 1 parameter which is the number of lines to draw from the
%base of the tree to the top of the branch, however since I am doing a rainbow 
%tree, for all other recursive calls I pass a second parameter named lineNumberWidthWise which
%is the number of the line going from left to right starting at 1 (i.e. 1,2,3 ... n) where 
%n is the number of branches to be made on this line level
/fractal 
{
	1 dict begin
	/numberOfFractals exch def
	
	startNumberOfFractals -1 eq %this happens only on the first fractal call
	{
		/startNumberOfFractals numberOfFractals def
		/lineNumberWidthWise 1 def
	}
	{
		/lineNumberWidthWise exch def
	}
	ifelse
	
	/lineLength numberOfFractals smallestLineHeight mul def
	
	numberOfFractals 1 ge
	{
		/lineLength lineLength 2 div def
		lineNumberWidthWise numberOfFractals getNumberOfLinesBeingCreated setColor
		0 0 moveto
		0 lineLength rlineto
		0 lineLength translate
		stroke
		
		/rightMostBranchToNextBranchNumber lineNumberWidthWise 1 sub 3 mul def
		
		%make a line going straight up from the current perspective
		rightMostBranchToNextBranchNumber 2 add numberOfFractals 1 sub  fractal

		%make a line rotated left of the current perspective
		rotateConstant rotate
		rightMostBranchToNextBranchNumber 1 add   numberOfFractals 1 sub fractal
		0 rotateConstant sub rotate

		%make a line rotated right of the current perspective
		0 rotateConstant sub rotate
		rightMostBranchToNextBranchNumber 3 add numberOfFractals 1 sub  fractal
		rotateConstant rotate

		0 0 lineLength sub translate %undo the translate in the vertical direction
	}
	if
	
	startNumberOfFractals numberOfFractals eq
	{
		/startNumberOfFractals -1 def %set it back to -1 (unassigned) for next fractal
		0 0 0 setrgbcolor
	}
	if
	
	end
	
} def

%this function takes the lineNumberWidthWise, which is the number of branches
%starting from left to right width-wise (going 1,2,3 ... n) where n is the name (variable) numberOfLinesBeingCreated
%and sets the color of the branch to a color in the rainbow based upon how far left or right that branch is
%the farther left the branch is, the more red it becomes and the more right it is, the more blue it becomes
/setColor
{
	1 dict begin
	/lineNumberWidthWise exch def
	/numberOfLinesBeingCreated exch def
	
	/percentIntoBranchesWidthWise numberOfLinesBeingCreated lineNumberWidthWise div def %what percent from left to right is the branch 
	
	%these percent values are the percent of red, green, and blue to be put into the new color of the branch
	%there are 3 seperate algorithms used to determine their value:
	
	
	%these are the values that are used when the branch is in the 1/3 left part of the tree
	%values ranges are R:1, green: 0 - 1, blue: 0
	/redPercent 1 def		
	/greenPercent percentIntoBranchesWidthWise 3 mul def
	/bluePercent 0 def		

	%these are the values that are used when the branch is in the 1/3 middle part of the tree
	%values ranges are R:0-1, green: 1, blue: 0-1
	percentIntoBranchesWidthWise 1 3 div ge
	{
		/redPercent 1 percentIntoBranchesWidthWise 3 mul sub def
		/greenPercent 1 def
		/bluePercent  percentIntoBranchesWidthWise 1 2 div sub 3 mul def
	}
	if
	
	%these are the values that are used when the branch is in the 1/3 right part of the tree
	%values ranges are R:0, green: 0-1, blue: 1
	percentIntoBranchesWidthWise 2 3 div ge
	{
		/redPercent 0 def
		/greenPercent 1 percentIntoBranchesWidthWise 2 3 div sub 3 mul sub def
		/bluePercent 1 def
	}
	if
	
	redPercent greenPercent bluePercent setrgbcolor
	
	
	end
} def

%this functions receives the numberOfFractalsToGo (how many depth-wise lines are needed
%before the branch is finished) and the startNumberOfFractals (how many lines from the
%base to branch-top) and then determines how many branches are going to be made on this line level
/getNumberOfLinesBeingCreated
{
	1 dict begin
	/numberOfFractalsToGo exch def
	/numberOfFractalsDone startNumberOfFractals numberOfFractalsToGo sub def
	
	/numberOfBranchesCreatedThisRound 1 def
	
	1 1 numberOfFractalsDone
	{
		pop 3
		numberOfBranchesCreatedThisRound mul
		/numberOfBranchesCreatedThisRound exch def
	}
	for
	
	numberOfBranchesCreatedThisRound
	
	end
} def